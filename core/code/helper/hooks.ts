import { Log, LogApp } from "../helper/log_apps";
const log = Log(LogApp.Events);


// PLUGIN HOOKS ////////////////////////////////////////////////////////
// Plugins may listen to any number of events by specifying the name of
// the event to listen to and handing a function that should be exe-
// cuted when an event occurs. Callbacks will receive additional data
// the event created as their first parameter. The value is always a
// hash that contains more details.
//
// For example, this line will listen for portals to be added and print
// the data generated by the event to the console:
// window.addHook('portalAdded', function(data) { log.log(data) });
//
// Boot hook: booting is handled differently because IITC may not yet
//            be available. Have a look at the plugins in plugins/. All
//            code before “// PLUGIN START” and after “// PLUGIN END” is
//            required to successfully boot the plugin.
//
// Here’s more specific information about each event:
// portalSelected: called when portal on map is selected/unselected.
//              Provide guid of selected and unselected portal.
// mapDataRefreshStart: called when we start refreshing map data
// mapDataEntityInject: called just as we start to render data. has callback to
//                      Sinject cached entities into the map render
// mapDataRefreshEnd: called when we complete the map data load
// portalAdded: called when a portal has been received and is about to
//              be added to its layer group. Note that this does NOT
//              mean it is already visible or will be, shortly after.
//              If a portal is added to a hidden layer it may never be
//              shown at all. Injection point is in
//              code/map_data.js#renderPortal near the end. Will hand
//              the Leaflet CircleMarker for the portal in "portal" var.
// linkAdded:   called when a link is about to be added to the map
// fieldAdded:  called when a field is about to be added to the map
// portalRemoved: called when a portal has been removed
// linkRemoved: called when a link has been removed
// fieldRemoved: called when a field has been removed
// portalDetailsUpdated: fired after the details in the sidebar have
//              been (re-)rendered Provides data about the portal that
//              has been selected.
// publicChatDataAvailable: this hook runs after data for any of the
//              public chats has been received and processed, but not
//              yet been displayed. The data hash contains both the un-
//              processed raw ajax response as well as the processed
//              chat data that is going to be used for display.
// factionChatDataAvailable: this hook runs after data for the faction
//              chat has been received and processed, but not yet been
//              displayed. The data hash contains both the unprocessed
//              raw ajax response as well as the processed chat data
//              that is going to be used for display.
// alertsChatDataAvailable: this hook runs after data for the alerts
//              chat has been received and processed, but not yet been
//              displayed. The data hash contains both the unprocessed
//              raw ajax response as well as the processed chat data
//              that is going to be used for display.
// requestFinished: DEPRECATED: best to use mapDataRefreshEnd instead
//              called after each map data request finished. Argument is
//              {success: boolean} indicated the request success or fail.
// iitcLoaded: called after IITC and all plugins loaded
// portalDetailLoaded: called when a request to load full portal detail
//              completes. guid, success, details parameters
// paneChanged  called when the current pane has changed. On desktop,
//              this only selects the current chat pane; on mobile, it
//              also switches between map, info and other panes defined
//              by plugins
// artifactsUpdated: called when the set of artifacts (including targets)
//              has changed. Parameters names are old, new.
// nicknameClicked:
// geoSearch:
// search:



type HookCallback = (data: any) => boolean | void;

/*
type EventMapDataRefreshStart = { bounds: L.LatLngBounds, mapZoom: number, dataZoom: number, minPortalLevel: number, tileBounds: L.LatLngBounds };
type mapDataRefreshStart_hook = (event: "mapDataRefreshStart", callback: (e: EventMapDataRefreshStart) => void) => void;
type generic_hook = (event: string, callback: HookCallback) => void;
*/

export const hooks: { [index: string]: HookCallback[] } = {};

let isRunning = 0;

export const runHooks = (event: string, data: any): boolean => {
    if (!hooks[event]) { return true; }

    isRunning++;
    const interrupted = hooks[event].every(callback => {
        if (callback(data) === false) {
            return false;
        } else {
            return true;
        }
    });

    isRunning--;
    return !interrupted;
};


export const addHook = (event: string, callback: HookCallback) => {
    if (!hooks[event]) {
        hooks[event] = [callback];
    } else {
        hooks[event].push(callback);
    }
};

// callback must the SAME function to be unregistered.
export const removeHook = (event: string, callback: HookCallback) => {
    let listeners = hooks[event];
    if (listeners) {
        const index = listeners.indexOf(callback);
        if (index === -1) {
            log.warn("Callback wasn't registered for this event.");
        } else {
            if (isRunning) {
                listeners[index] = () => {/* noop */ };
                hooks[event] = listeners = listeners.slice();
            }
            listeners.splice(index, 1);
        }
    }
};
